// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1KGPsGct1aorWokhuN4v9
// Component: a65RSNcF-F1UK
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_launch_page.module.css" // plasmic-import: b1KGPsGct1aorWokhuN4v9/projectcss
import * as sty from "./PlasmicCounter.module.css" // plasmic-import: a65RSNcF-F1UK/css

export const PlasmicCounter__VariantProps = new Array()

export const PlasmicCounter__ArgProps = new Array("children")

function PlasmicCounter__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__hcFb0
              )}
            >
              {"32"}
            </h2>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rbItD
              )}
            >
              {"Days"}
            </div>
          </React.Fragment>
        ),

        value: args.children,
      })}
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCounter__ArgProps,
      internalVariantPropNames: PlasmicCounter__VariantProps,
    })

    return PlasmicCounter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicCounter"
  } else {
    func.displayName = `PlasmicCounter.${nodeName}`
  }
  return func
}

export const PlasmicCounter = Object.assign(
  // Top-level PlasmicCounter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCounter
    internalVariantProps: PlasmicCounter__VariantProps,
    internalArgProps: PlasmicCounter__ArgProps,
  }
)

export default PlasmicCounter
/* prettier-ignore-end */
